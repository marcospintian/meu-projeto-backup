version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: atendimentos_db
    environment:
      POSTGRES_DB: atendimentos
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d atendimentos"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - atendimentos_network

  # Optimized Backend Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: atendimentos_backend
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/atendimentos
      JWT_SECRET: development_secret_key_change_in_production
      SALT_ROUNDS: 10
      JWT_EXPIRES_IN: 2h
      ADMIN_USERNAME: admin
      ADMIN_PASSWORD: senha123
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/wake-up', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - atendimentos_network
    restart: unless-stopped

  # Redis for caching (optional performance enhancement)
  redis:
    image: redis:7-alpine
    container_name: atendimentos_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - atendimentos_network
    restart: unless-stopped

  # Nginx reverse proxy (optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: atendimentos_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - atendimentos_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  atendimentos_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16